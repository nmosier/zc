01/07/2020
TASK: Add support for structs.
 * ...

01/08/2020

Today, I continued working on adding support for structs. This involves
       (1) declaring the STRUCT token in the parser and adding a rule to the lexer to tokenize `struct' into STRUCT,
       (2) adding productions to the `decl_specs' non-terminal in the parser's grammar file so that it recognizes `struct' type specifiers,
       (3) implementing some kind of scoping mechanism for struct declaration,
       (4) adding type checking functions to ensure structs aren't redefined and that they are defined when used, and finally
       (5) generate code for reserving storage for structs and accessing struct members.


In the process of doing this, I started to enounter issues with 
TASK: Continue adding support for structs.

TASK: Improve handling of declaration specifiers.
C declaration specifiers come in a few different types: type specifiers (`void', `char', `int', etc.), storage class specifiers (`extern', `static', etc.), and type qualifiers (`const', `volatile', etc.). Currently, zc only supports most type specifiers but no storage class specifiers or type qualifiers.


@@@@@@@@@@@@@@@
[1 hr] Set up basic testing infrastructure.
   I copied the "runner.sh" script from Professor Linderman's midd-cool-osx GitHub repository and made a few changes to make it work better with zc's semant-main and cgen-main compiler drivers. I also created a new "tst/semant" directory and placed some simple tests in there. More complex ones are to come.

[1 hr] Wrote struct tests and fixed struct type-checking bugs.
   More bugs that I haven't fixed: structs definitions without accompanying variable declarations (e.g. `struct coords { int x; int y; };' ) never makes it past the parser. I'll fix this bug tomorrow.

01/09/2020
[1 hr] I thought about how to approach the bug mentioned in the previous entry, i.e. when the struct definition
      struct coords {
             int x;
             int y;
      };
   is made without any accompanying variable declaraiton, the parser simply drops the struct definition because there are no variables to declare. One solution that I chose not to pursue would be to
   add ``bound types'', each of which would inherit from a respective ``unbound type'' and implement a ``declarable'' interface. Then, the result of a declaration would be a list of types, some of which
   would be declarable. While this wouldn't help the above problem much, it feels like a more satisfactory approach than just checking if a type's ``sym'' field is null to determine whether it's an
   abstract or bounded type.

   Instead, I implemented more of a quick fix: if a type specifier accompanies no declarators, the declaration list simply contains one element, the type specifier. This way the parser always retains
   the struct definition.

   I also wrote some basic struct declaration tests for the semantic analyzer. It passes those.

[1 hr]
   I implemented code generation for structs and struct member access and wrote a couple tests; it appears to be working. I also fixed some semantic analysis bugs along the way.
   I expect there a few bugs related to declaration (including struct declaration) semantics currently:
     [ ] If a declaration is simply an unbound type (e.g. in the above ``struct coords'' example), the compiler currently still allocates storage for it. This is due to a quirk in how bound declarations
         and unbound types are (or, rather, aren't) distinguished. There's got to be a better way to distinguish bound and unbound types, but I can't haven't found one yet.
   And anticipated struct codegen bugs:
     [ ] compiler aborts if one struct is (validly) assigned to another of the same type. In the future, this kind of assignment should result in a call to memcpy().
   Next, I'll work on ... the sizeof operator!
   
[2 hrs]
   I added the ``sizeof'' operator. ``sizeof'' is a compile-time operator that accepts two kinds of arguments -- types and expressions -- and returns the number of bytes the argument requires
   for storage. I added the syntactic rules for ``sizeof'' in the parser grammer, added the ``SIZEOF'' token to the lexer, and created a new expression class, ``SizeofExpr''.
   ``SizeofExpr'' has a variant member that holds an ASTType or another ASTExpr. During semantic analysis, both the ASTType and ASTExpr are type-checked (in the pedantic case, a struct may be defined
   within the type!), but during codegen, the ``sizeof'' expression collapses to an immediate value (no code is generated for the possible subexpression).
   Next, I'll work on ... adding the ``->'' operator.

[2 hrs]
   Adding the arrow operator was relatively straightforward: all it required was adding the applicable lexer/parser rules. It didn't require any extra work on the semantic analyzer or code generator, since I had already implemented '.' semantics, and
          coords->x
is semantically equivalent to
          (*coords).x
Accordingly, the new rule in the parser simply takes the left-hand expression, wraps it in a dereference unary operation, and then creates a ``MembExpr'' object.
Next, I wrote a couple tests for the arrow operator, which is when I started to encounter strange behavior. When I ran a simple test on semant-main, it correctly did not report any errors; however, when I ran the same test on cgen-main, it did report errors (but only when the test was on stdin, rather than passed as a command-line argument). I figured out I was referencing the wrong variable in the StructType::EnscopeStruct function, and I fixed the issue. (This didn't explain the difference in behavior, however.)
      Next, I'll work on adding arrays.

01/10/2020

[4 hrs] I added partial support for arrays. What _does_ work, confirmed by tests:
   (i) declaring arrays with an explicit, contant-expression size, like ```char buf[100];```
       or ```char buf[100+20-30/4%2+3^2&1];```
   (ii) indexing arrays as lvalues and rvalues, like ```
           int a;
           a = buf[2];```
        or ```buf[a] = a;```
   What should work, but hasn't been tested:
   (i) implicitly casting an array to pointer, like ```
       char *ptr;
       ptr = buf;```
   (ii) indexing pointers, like ```
        ptr[2] = 'c';```
   What doesn't work:
   (i) Variable-length arrays (this is an optional C feature, anyway)
   (ii) Initializing an array (or any variable, for that matter)
   (iii) Declaring an array without specifying the size, as in `int main(int argc, char *argv[])`.

[3 hrs] I added unions. This wasn't too difficult since their grammar is identical to structs. I created a new abstract type 'TaggedType', from which both StructType and UnionType inherit. I moved most of the old StructType code over to TaggedType; the only significant different between StructType and UnionType is how they assign offsets to members: the offset of the _n_th member in a struct is the offset of the (_n_-1)th member plus the size of that member in bytes (or 0 if _n_ = 0); the offset of the _n_th member in a union is just 0. 

[2 hrs] Implemented GOTO.

01/11/2020

I spent today working on adding enums. Enums are a 3rd (and last) kind of ``tagged type'' (along with structs and unions). Tagged types are qualified with a 'struct', 'union', or 'enum' and followed by an optional identifier. (Tagged types without tags are called anonymous.) Because of the similarities between how structs, unions, and enums behave, I created a new base class for these three types, 'TaggedType'. The TaggedType class has a 'tag()' property and it specifies an interface for tagged types:
  - TagKind tag_kind(): what kind of tag this is (TAG_STRUCT, TAG_UNION, or TAG_ENUM)
  - bool is_complete(): whether this tagged type carries a complete definition
  - void complete(const TaggedType *other): complete this type's definition given a complete instance of this type
An auxiliary template class 'template <typename Memb> TaggedType_aux' inherits from TaggedType and implements TaggedType's interface. This auxiliary class defines a member 'membs', an pointer to an unordered map from Symbol * (which are the member identifiers) to Memb *, the template parameter. complete()'ing the definition of a type simply involves copying the member map pointer from the given complete type.
Further, the new 'CompoundType' class inherits from 'TaggedType_aux<ASTType>', representing types that hold multiple other types, namely structs and unions. This defines its own small interface, specifically 'offset()', which finds the offset of a given member ID within the compound type.
The enum type EnumType inherits from TaggedType_aux<Enumerator>, where 'Enumerator' is a new AST node representing a single enumerator declaration in an enum.

01/12/2020
[1 hr] I fixed a bug relating to the scoped redeclaration of scoped tagged types. The compiler was overly permissive when a tagged type, e.g. struct, was redefined and then an expression of that new tagged type could be assigned to an lvalue of the previous definition of the tagged type. I fixed this by adding a unique identifier to each class of declarations of the same tagged type. That is, in the following code snippet
   [1] struct coords;
   [2] struct coords { int x,y; }
       int main(void) {
   [3]   struct coords;
   [4]   struct coords { int x,y; }
       }
structs on [1], [2], [3] share the same unique ID, while [4] has a different unique ID. This resolved the bug, and I confirmed it with tests.

01/13/2020
[6 hrs] ASTType -> {Var,Type}Decl

01/14/2020
[1 hr] I added pre/post inc/dec expressions. Instead of creating a new expression class, I added four new 'kinds' to the UnaryExpr class, UOP_{INC,DEC}_{PRE,POST}. I wrote some tests to confirm
       that these operators are working. Interestingly, there is no penalty for pre- vs. post-increment/decrement on chars (single-byte values); however, there _is_ a penalty for post-inc'ing/dec'ing
       ints.

[6 hrs] Added typedefs. TODO

[1 hr] Added for loop.

01/15/2020
[1 hr] Wrote tests for loop; fixed binary operation bug (invalid 'case' fallthrough in switch statement, leading to incorrect type being assigned). Added comma operator (the one that separates
       expressions).

01/16/2020
[1 hr] Wrote script that searches through the TI 84+ CE C runtime (CRT) for given symbols (e.g. sprintf, imulu, etc.) and then prints out the disassembled contents. This script was tricky because the CRT functions use a trampoline (for stability across releases) -- that is, the static address `__sprintf' points to a single jump instruction that jumps to the real implemenation of _sprintf.

[1 hr] I wrote a new C runtime function 'cdivu' that divides two unsigned chars. (The CRT already on the calculator did not have this, and fast division is non-trivial). I unit-tested this, and it works.

[2 hr] Wrote program 'memcpy.c' to demonstrate current state of compiler. It contains three functions:
   ```
   int main(int argc, char **argv); /* main */
   void *mymemset(void *dst, char c, size_t bytes); /* re-implementation of C memset function */
   void *mymemcpy(void *dst, void *src, size_t bytes); /* re-implementation of C memcpy function */
   ```
   At first, the program wouldn't compile; later, it wouldn't produce correct output and/or crash. I went back and fixed those bugs. This program behave correctly now.
   memcpy.c compiles to approximately 170 lines of code (!!!). This should be a very easy to target for optimization.

[2 hr] Added new pass to compiler: AST optimization. This pass currently looks for constant expressions/statements and replaces them with literals or simplifies statements. For example, consider the
       following for loop:
       for (i = 0; 1; ++i)
           if (i % 7 == 1 && i % 13 == 2)
              break;

       The loop condition `1` (i.e. true) is constant, so this for loop is transformed into a basic loop like so:
       i = 0;
       loop:
         if (i % 7 == 1 && i % 13 == 2)
            break;
         ++i;
         goto loop;

